{"ast":null,"code":"import React from \"react\";\nimport { get } from \"lodash\";\nimport { WEATHER_API } from \"../constants/apis\";\nimport { DEFAULT_CITY, DEFAULT_LAT, DEFAULT_LNG, DEFAULT_STATE } from \"../constants/defaults\";\nexport default function GetForecastOffice({\n  lat,\n  lng\n}) {\n  lat = lat || DEFAULT_LAT;\n  lng = lng || DEFAULT_LNG;\n  const [forecastURL, setForecastURL] = React.useState(\"\");\n  const [city, setCity] = React.useState(DEFAULT_CITY);\n  const [state, setState] = React.useState(DEFAULT_STATE);\n  React.useEffect(() => {\n    if (lat && lng) {\n      fetch(`${WEATHER_API}/${lat},${lng}`).then(res => res.json()).then(officeResponse => {\n        setForecastURL(get(officeResponse, \"properties.forecast\"));\n        setCity(get(officeResponse, \"properties.relativeLocation.properties.city\", DEFAULT_CITY));\n        setState(get(officeResponse, \"properties.relativeLocation.properties.state\", DEFAULT_STATE));\n      }).catch(err => {\n        console.log(\"Unable to fetch URL\", err);\n      });\n    }\n  }, [lat, lng]);\n  return {\n    city,\n    state,\n    forecastURL\n  };\n}","map":{"version":3,"sources":["/Users/swaroopreddyvudumula/Downloads/Swaroop weather App Assignment complete by monday/src/hooks/GetForecastOffice.js"],"names":["React","get","WEATHER_API","DEFAULT_CITY","DEFAULT_LAT","DEFAULT_LNG","DEFAULT_STATE","GetForecastOffice","lat","lng","forecastURL","setForecastURL","useState","city","setCity","state","setState","useEffect","fetch","then","res","json","officeResponse","catch","err","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SACEC,YADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,aAJF,QAKO,uBALP;AAOA,eAAe,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAA3B,EAAyC;AACtDD,EAAAA,GAAG,GAAGA,GAAG,IAAIJ,WAAb;AACAK,EAAAA,GAAG,GAAGA,GAAG,IAAIJ,WAAb;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCX,KAAK,CAACY,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,KAAK,CAACY,QAAN,CAAeT,YAAf,CAAxB;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBhB,KAAK,CAACY,QAAN,CAAeN,aAAf,CAA1B;AACAN,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAIT,GAAG,IAAIC,GAAX,EAAgB;AACdS,MAAAA,KAAK,CAAE,GAAEhB,WAAY,IAAGM,GAAI,IAAGC,GAAI,EAA9B,CAAL,CACGU,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,cAAD,IAAoB;AACxBX,QAAAA,cAAc,CAACV,GAAG,CAACqB,cAAD,EAAiB,qBAAjB,CAAJ,CAAd;AACAR,QAAAA,OAAO,CACLb,GAAG,CACDqB,cADC,EAED,6CAFC,EAGDnB,YAHC,CADE,CAAP;AAOAa,QAAAA,QAAQ,CACNf,GAAG,CACDqB,cADC,EAED,8CAFC,EAGDhB,aAHC,CADG,CAAR;AAOD,OAlBH,EAmBGiB,KAnBH,CAmBUC,GAAD,IAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,GAAnC;AACD,OArBH;AAsBD;AACF,GAzBD,EAyBG,CAAChB,GAAD,EAAMC,GAAN,CAzBH;AA2BA,SAAO;AACLI,IAAAA,IADK;AAELE,IAAAA,KAFK;AAGLL,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import React from \"react\";\nimport { get } from \"lodash\";\nimport { WEATHER_API } from \"../constants/apis\";\nimport {\n  DEFAULT_CITY,\n  DEFAULT_LAT,\n  DEFAULT_LNG,\n  DEFAULT_STATE,\n} from \"../constants/defaults\";\n\nexport default function GetForecastOffice({ lat, lng }) {\n  lat = lat || DEFAULT_LAT;\n  lng = lng || DEFAULT_LNG;\n  const [forecastURL, setForecastURL] = React.useState(\"\");\n  const [city, setCity] = React.useState(DEFAULT_CITY);\n  const [state, setState] = React.useState(DEFAULT_STATE);\n  React.useEffect(() => {\n    if (lat && lng) {\n      fetch(`${WEATHER_API}/${lat},${lng}`)\n        .then((res) => res.json())\n        .then((officeResponse) => {\n          setForecastURL(get(officeResponse, \"properties.forecast\"));\n          setCity(\n            get(\n              officeResponse,\n              \"properties.relativeLocation.properties.city\",\n              DEFAULT_CITY\n            )\n          );\n          setState(\n            get(\n              officeResponse,\n              \"properties.relativeLocation.properties.state\",\n              DEFAULT_STATE\n            )\n          );\n        })\n        .catch((err) => {\n          console.log(\"Unable to fetch URL\", err);\n        });\n    }\n  }, [lat, lng]);\n\n  return {\n    city,\n    state,\n    forecastURL,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}